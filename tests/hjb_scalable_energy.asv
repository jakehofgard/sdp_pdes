% Scalable code for higher dimensional version of energy minimization
% optimal control problem.
solvers = ['sedumi', 'mosek', 'scs', 'sdpt3', 'sdpnal'];
mset('yalmip', true)

% Set SCS solver settings

% Primal scale factor is 1e-6 (better convergence than default 1e-3)
scaling = 1e-6;
trial = [];
for alpha = 1.74:0.01:1.8
    mset(sdpsettings( ...
        'solver', 'scs', ...
        'verbose', 1, ...
        'showprogress', 1, ...
        'debug', 1, ...
        'scs.alpha', alpha, ... % DR relaxation. Default value is 1.5, recommended between 1-2.
        'scs.rho_x', scaling, ... % Primal scale factor. Default value is 1e-3.
        'scs.scale', 3.0, ... % Dual scale factor. YALMIP Default factor is 5.0. 
        'scs.gpu', 1) ...
    );
    
    tic;
    % Parameters
    
    d = 1; % Relaxation degree
    n = 3; % Dimension of problem
    lmbda = 10; % Regularization parameter, problem specific
    
    % Interior occupation measure
    mpol('x', n + 1);
    mpol('z', n);
    m = meas([x; z]);
    
    % Boundary measures, defined as a vector of measures
    mpol('xb', 2 * n * (n + 1));
    mpol('zb', 2 * n^2);
    mb = meas([xb; zb]);
    
    % Determine support constraints
    K = [];
    
    % Support constraints for occupation measure
    for i = 1:n
        K = [K, 0 <= x(i), x(i) <= 1];
    end
    
    disp(K);
    
    % Support constraints for boundary measures
    for i = 1:2 * n
        for j = 1:n
            ind = (i - 1) * (n + 1) + j;
            if j == ceil(i / 2)
                K = [K, xb(ind) == mod(i, 2)]; 
            else
                K = [K, 0 <= xb(ind), xb(ind) <= 1];
            end
        end
    end
    
    disp(K);
    
    % Define interior test functions
    phi_int = mmon(x, d);
    
    % Determine moment constraints
    
    M = [];
    % Add constraint (C1)
    for i = 1:n
        ind_1 = 2 * (i - 1) * (n + 1) + 1;
        ind_2 = ind_1 + n;
        phi_1 = mmon(xb(ind_1:ind_2), d);
        phi_2 = mmon(xb(ind_2 + 1:ind_2 + n + 1), d);
        M = [M, mom(diff(phi_int, x(i)) + diff(phi_int, x(n+1)) * z(i)) == 0];
    end
    
    % Add constraint (C2)
    norm_term = x(1)^2;
    int_term = mom((diff(phi_int, x(1))...
        + diff(phi_int, x(n+1)) * z(1)) * z(1));
    bd_term = mom(-mmon(xb(1:n+1), d) * zb(1))...
        + mom(mmon(xb(n+2:2*n+2), d) * zb(n + 2));
    
    for i = 2:n
        norm_term = norm_term + x(i)^2;
        int_term = int_term + mom((diff(phi_int, x(i))...
            + diff(phi_int, x(n+1)) * z(i)) * z(i));
    end
    
    first_ord_term = mom(phi_int * (x(1) - lmbda * norm_term));
    
    M = [M, first_ord_term + bd_term == int_term];
    
    % Add constraint (C3)
    ft_ind = n + 2;
    norm_sq = xb(ft_ind)^2;
    phi_f = mmon(xb(ft_ind:ft_ind + n), d);
    for i = 2:n
        norm_sq = norm_sq + xb(ft_ind + i)^2;
    end
    
    % Add boundary constraints
    % M = [M, mom(phi_f * norm_sq * (1 - norm_sq)) == 0];
    
    % Define energy of solution
    J = min(mom(x(n+1)^2 / 2));
    
    P = msdp(J, K, M);
    
    % Solve problem using predefined solver
    [status, obj] = msol(P);
    
    % Rescale true objective according to primal scale factor
    true_obj = obj / scaling;

    trial = [trial;[alpha, true_obj]];
    writematrix(trial, "outputs/dr_hyperparam_alpha_n=3_scale=8_highrel.csv")

    % Display resclaed objective value
    disp(["Relaxation degree " int2str(d) ": lower bound = " num2str(true_obj)]);
    toc;
end